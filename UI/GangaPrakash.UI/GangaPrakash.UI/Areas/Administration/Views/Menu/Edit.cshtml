@using GangaPrakashAPI.Model
@model MenuTrans
<div class="wrapper wrapper-content">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox ">
                <div class="ibox-title">
                    <h5>Menu</h5>
                </div>
                <div class="ibox-content">
                    <form role="form" method="post">
                        @Html.HiddenFor(model => model.menu.Id)
                        @Html.AntiForgeryToken()
                        <div class="form-group row">

                            <label class="col-sm-2 col-form-label">Module</label>
                            <div class="col-sm-4">
                                @Html.DropDownListFor(model => model.menu.ModuleId, new SelectList(Model.menu.ModuleNVList, "Key", "Value", Model.menu.ModuleId), new { @class = "ModuleDropdown form-control" })
                            </div>
                            <label class="col-sm-2 col-form-label">Parent Menu</label>
                            <div class="col-sm-4">
                                @Html.DropDownListFor(model => model.menu.ParentId, new SelectList(Model.menu.MenuNVList, "Key", "Value", Model.menu.ParentId), "--Select--", new { @class = "ParentMenuDropdown form-control" })
                            </div>
                        </div>
                        <div class="form-group row">

                            <label class="col-sm-2 col-form-label"></label>
                            <div class="col-sm-4">
                                @Html.ValidationMessageFor(model => model.menu.ModuleId, "", new { @class = "text-danger" })
                            </div>
                            <label class="col-sm-2 col-form-label"></label>
                            <div class="col-sm-4">
                                @Html.ValidationMessageFor(model => model.menu.ParentId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-2 col-form-label">Name</label>
                            <div class="col-sm-4"><input type="text" id="Name" name="menu.Name" placeholder="Name" class="form-control" value="@Model.menu.Name" required=""></div>
                            <label class="col-sm-2 col-form-label">Area</label>
                            <div class="col-sm-4"><input type="text" id="Area" name="menu.Area" placeholder="Area" class="form-control" value="@Model.menu.Area" required=""></div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-2 col-form-label"></label>
                            <div class="col-sm-4">
                                @Html.ValidationMessageFor(model => model.menu.Name, "", new { @class = "text-danger" })
                            </div>
                            <label class="col-sm-2 col-form-label"></label>
                            <div class="col-sm-4">
                                @Html.ValidationMessageFor(model => model.menu.Area, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            <label class="col-sm-2 col-form-label">Controller</label>
                            <div class="col-sm-4"><input type="text" id="Controller" name="menu.Controller" placeholder="Controller" class="form-control" value="@Model.menu.Controller" required=""></div>
                            <label class="col-sm-2 col-form-label">Action</label>
                            <div class="col-sm-4"><input type="text" id="Action" name="menu.Action" placeholder="Action" class="form-control" value="@Model.menu.Controller" required=""></div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-2 col-form-label"></label>
                            <div class="col-sm-4">
                                @Html.ValidationMessageFor(model => model.menu.Controller, "", new { @class = "text-danger" })
                            </div>
                            <label class="col-sm-2 col-form-label"></label>
                            <div class="col-sm-4">
                                @Html.ValidationMessageFor(model => model.menu.Action, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-2 col-form-label">Sequence No.</label>
                            <div class="col-sm-4"><input id="SequenceNo" name="menu.SequenceNo" class="form-control touchspin1" value="@Model.menu.SequenceNo" required=""></div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-2 col-form-label"></label>
                            <div class="col-sm-4">
                                @Html.ValidationMessageFor(model => model.menu.SequenceNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="hr-line-dashed"></div>
                        <div class="form-group row">
                            <label class="col-sm-2 col-form-label">Privileges</label>

                            <div class="col-sm-10 i-checks">
                                @for (int i = 0; i < Model.privilegeList.Count; i++)
                                {
                                    <input type="hidden" value="@Model.privilegeList[i].Id" name="privilegeList[@i].Id" id="privilegeList[i].Id" />
                                    <input type="hidden" value="@Model.privilegeList[i].Name" name="privilegeList[@i].Name" id="privilegeList[i].Name" />
                                    <input type="hidden" value="@Model.privilegeList[i].SequenceNo" name="privilegeList[@i].SequenceNo" id="privilegeList[i].SequenceNo" />

                                    <label class="i-checks checkbox-inline">
                                        @Html.CheckBoxFor(model => Model.privilegeList[i].IsChecked)<i></i> @Model.privilegeList[i].Name
                                    </label>
                                }
                            </div>
                        </div>
                        <div class="form-group row">
                            <div class="col-sm-4 col-sm-offset-2"></div>
                            <div class="col-sm-4 col-sm-offset-2"></div>

                            <div class="col-sm-4 col-sm-offset-2">
                                <button class="btn btn-primary btn-sm" type="submit">Save</button>
                                <button class="btn btn-danger btn-sm DeleteMenu" type="button">Delete</button>
                                <button class="btn btn-white btn-sm" type="button" onclick="location.href='@Url.Action("Index","Menu",new { Area="Administration"})'">Cancel</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    <!-- iCheck -->
    <script src="~/lib/iCheck/icheck.min.js"></script>
    <script src="~/Scripts/Ajax.js"></script>

    <script>
        $(document).ready(function () {
            $('.i-checks').iCheck({
                checkboxClass: 'icheckbox_square-green',
                radioClass: 'iradio_square-green',
            });
        });
        $('.DeleteMenu').click(function () {
            swal({
                title: "Are you sure?",
                text: "",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "Delete",
                cancelButtonText: "Cancel",
                closeOnConfirm: false,
                closeOnCancel: false
            },
                function (isConfirm) {
                    if (isConfirm) {
                        var Id = '@Model.Id';
                        var DeleteUrl = '@Url.Action("Delete","Menu",new { Area="Administration",Id=Model.Id})';
                        window.location.href = DeleteUrl;
                    } else {
                        swal("Cancelled", "Cancelled :)", "error");
                    }
                });
        });
        $(".ParentMenuDropdown").select2({
            theme: 'bootstrap4',
        });
        $(".ModuleDropdown").select2({
            theme: 'bootstrap4',
        });
        var ModuleId = $('#menu_ModuleId').val();
        var ParentId = '@Model.menu.ParentId';
        AjaxFillDropdown('/Menu/GetParentMenuByModuleId', ModuleId, 'menu_ParentId');
        debugger;
        if (ParentId != null && ParentId != "" && ParentId!='@Guid.Empty') {
            $("#menu_ParentId").val(ParentId);

    }
    else {
            $("#menu_ParentId").val('');

    }
        $('#menu_ModuleId').on("change", function () {

            var ModuleId = $('#menu_ModuleId').val();
            AjaxFillDropdown('/Menu/GetParentMenuByModuleId', ModuleId, 'menu_ParentId');
        });
    </script>
}